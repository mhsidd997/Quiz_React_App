{"version":3,"sources":["api/dataSet.js","components/Question.js","components/Answer.js","components/AnswerList.js","components/UserGreeting.js","components/UserMsg.js","components/QuizArea.js","components/TotalCorrect.js","components/TotalIncorrect.js","components/ScoreArea.js","components/Questionaire.js","App.js","serviceWorker.js","index.js"],"names":["dataSet","question","options","correct","Question","props","className","Answer","type","onClick","handleClick","choice","answer","AnswerList","i","length","push","UserGreeting","UserMsg","QuizArea","isFinished","TotalCorrect","TotalIncorrect","incorrect","ScoreArea","Questionaire","state","current","isPassed","bind","this","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7c072d1.chunk.js","sourcesContent":["const dataSet = [\r\n    {\r\n        question: \"Inside which HTML element do we put the JavaScript?\",\r\n        options: [\r\n            \"<scripting>\",\r\n            \"<js>\",\r\n            \"<script>\",\r\n            \"<javascript>\"\r\n        ],\r\n        correct: 2\r\n    },\r\n    {\r\n        question: \"The external JavaScript file must contain the <script> tag.\",\r\n        options: [\r\n            \"True\",\r\n            \"False\",\r\n        ],\r\n        correct: 1\r\n    },\r\n    {\r\n        question: \"Where is the correct place to insert a JavaScript?\",\r\n        options: [\r\n            \"Both the <head> section and the <body> section are correct\",\r\n            \"The <head> section\",\r\n            \"The <body> section\",\r\n\r\n        ],\r\n        correct: 0\r\n    },\r\n];\r\n\r\nexport default dataSet;","import React from 'react'\r\n\r\nfunction Question(props) {\r\n    return (\r\n        <div>\r\n            <h1 className=\"question\">{props.dataSet.question}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n\r\nfunction Answer(props) {\r\n    return (\r\n        <div>\r\n            <button className=\"btnAnswer\" type=\"button\" onClick={() => props.handleClick(props.choice)}>{props.answer}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer;","import React from 'react'\r\nimport Answer from './Answer';\r\n\r\n\r\nfunction AnswerList(props) {\r\n    \r\n    const options =[];\r\n    for(let i=0; i < props.dataSet.options.length; i++){\r\n        options.push(<Answer choice={i} handleClick={props.handleClick} answer={props.dataSet.options[i]}/>)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {options}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnswerList;\r\n","import React from 'react';\r\n\r\nfunction UserGreeting(props) {\r\n    \r\n    return (\r\n        <div className=\"userGreeting\">\r\n            <h2>You Passed the Quiz</h2>\r\n            <h2>Thank You for Completing the Quiz</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserGreeting;\r\n","import React from 'react'\r\n\r\nfunction UserMsg() {\r\n    return (\r\n        <div className=\"userGreeting\">\r\n            <h2>You failed the Quiz.</h2>\r\n            <h2>Better Luck Next Time!</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserMsg;\r\n","import React from 'react'\r\nimport Question from './Question';\r\nimport AnswerList from './AnswerList';\r\nimport UserGreeting from './UserGreeting';\r\nimport UserMsg from './UserMsg';\r\n\r\nfunction QuizArea(props) {\r\n\r\n    if(props.isFinished){\r\n        if(props.correct >= 2){\r\n           return <UserGreeting />\r\n        }\r\n        else {\r\n            return <UserMsg />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Question dataSet={props.dataSet}/>\r\n            <AnswerList handleClick={props.handleClick} dataSet={props.dataSet}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizArea;","import React from 'react';\r\n\r\nfunction TotalCorrect(props) {\r\n    return <h3 className=\"correctAns\">Correct: {props.correct}</h3>\r\n}\r\n\r\nexport default TotalCorrect;\r\n","import React from 'react';\r\n\r\nfunction TotalIncorrect(props) {\r\n    return <h3 className=\"incorrectAns\">Incorrect: {props.incorrect}</h3>\r\n}\r\n\r\nexport default TotalIncorrect;\r\n","import React from 'react'\r\nimport TotalCorrect from './TotalCorrect';\r\nimport TotalIncorrect from './TotalIncorrect';\r\n\r\nfunction ScoreArea(props) {\r\n    return (\r\n        <div className=\"scoreWrapper\">\r\n            <TotalCorrect correct={props.correct}/>\r\n            <TotalIncorrect incorrect={props.incorrect}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreArea;\r\n","import React, { Component } from 'react'\r\nimport dataSet from '../api/dataSet';\r\nimport QuizArea from './QuizArea';\r\nimport ScoreArea from './ScoreArea';\r\n\r\nclass Questionaire extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state= {\r\n            current :0,\r\n            dataSet: dataSet,\r\n            correct: 0,\r\n            incorrect :0,\r\n            isFinished: false,\r\n            isPassed:false\r\n        }\r\n        this.handleClick=this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(choice){\r\n        if (choice === this.state.dataSet[this.state.current].correct){\r\n            this.setState({correct: this.state.correct + 1})\r\n        } else {\r\n            this.setState({incorrect: this.state.incorrect + 1})\r\n        }\r\n\r\n        if (this.state.current === this.state.dataSet.length -1){\r\n            this.setState({isFinished:true})\r\n        } else{\r\n            this.setState({current:this.state.current + 1})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <QuizArea handleClick={this.handleClick} correct={this.state.correct} isFinished={this.state.isFinished} dataSet={this.state.dataSet[this.state.current]}/>\r\n                <ScoreArea correct={this.state.correct} incorrect={this.state.incorrect}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Questionaire;\r\n","import React from 'react';\nimport './App.css';\nimport Questionaire from './components/Questionaire'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>JavaScript Quiz</h1>\n      <Questionaire />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}